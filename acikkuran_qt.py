import sys
import os
import pandas as pd
import re
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QListWidget, QListWidgetItem, QComboBox, QPushButton, QScrollArea, QFrame, QTextEdit, QTextBrowser, QGroupBox, QTabWidget, QMainWindow, QSpinBox, QSplitter, QGridLayout, QMessageBox, QDialog, QMenu, QFileDialog, QCompleter
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtGui import QFont, QClipboard
from PyQt5.QtGui import QFont, QTextOption, QTextBlockFormat, QTextCursor
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtWidgets import QLabel
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
import arabic_reshaper
from bidi.algorithm import get_display
import json
import unicodedata

class QuranSearchApp(QMainWindow):
    def __init__(self, app):
        super().__init__()
        self.app = app  # QApplication referansƒ±
        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        self.setWindowTitle('A√ßƒ±k Kur‚Äôan Ara≈ütƒ±rmacƒ±sƒ± (PyQt5)')
        self.setGeometry(100, 100, 1400, 800)
        self.font_arabic = QFont('Arial Unicode MS', 20)
        self.font_turkish = QFont('Arial', 12)
        self.player = QMediaPlayer()
        self.ARAP_HARFLER = ['ÿß','ÿ®','ÿ™','ÿ´','ÿ¨','ÿ≠','ÿÆ','ÿØ','ÿ∞','ÿ±','ÿ≤','ÿ≥','ÿ¥','ÿµ','ÿ∂','ÿ∑','ÿ∏','ÿπ','ÿ∫','ŸÅ','ŸÇ','ŸÉ','ŸÑ','ŸÖ','ŸÜ','Ÿá','Ÿà','Ÿä','ÿ°','Ÿâ']
        self.ebced = {'ÿß':1, 'ÿ®':2, 'ÿ¨':3, 'ÿØ':4, 'Ÿá':5, 'Ÿà':6, 'ÿ≤':7, 'ÿ≠':8, 'ÿ∑':9, 'Ÿä':10, 'ŸÉ':20, 'ŸÑ':30, 'ŸÖ':40, 'ŸÜ':50, 'ÿ≥':60, 'ÿπ':70, 'ŸÅ':80, 'ÿµ':90, 'ŸÇ':100, 'ÿ±':200, 'ÿ¥':300, 'ÿ™':400, 'ÿ´':500, 'ÿÆ':600, 'ÿ∞':700, 'ÿ∂':800, 'ÿ∏':900, 'ÿ∫':1000}
        self.harekeler = ['\u064b', '\u064c', '\u064d', '\u064e', '\u064f', '\u0650', '\u0651', '\u0652', '\u0653', '\u0654', '\u0655', '\u0656', '\u0657', '\u0658', '\u0659', '\u065a', '\u065b', '\u065c', '\u065d', '\u065e', '\u065f', '\u06ea']
        # Sure ayet sayƒ±larƒ± (basit dict)
        self.verse_counts = {
            1: 7, 2: 286, 3: 200, 4: 176, 5: 120, 6: 165, 7: 206, 8: 75, 9: 129, 10: 109,
            11: 123, 12: 111, 13: 43, 14: 52, 15: 99, 16: 128, 17: 111, 18: 110, 19: 98, 20: 135,
            21: 112, 22: 78, 23: 118, 24: 64, 25: 77, 26: 227, 27: 93, 28: 88, 29: 69, 30: 60,
            31: 34, 32: 30, 33: 73, 34: 54, 35: 45, 36: 83, 37: 182, 38: 88, 39: 75, 40: 85,
            41: 54, 42: 53, 43: 89, 44: 59, 45: 37, 46: 35, 47: 38, 48: 29, 49: 18, 50: 45,
            51: 60, 52: 49, 53: 62, 54: 55, 55: 78, 56: 96, 57: 29, 58: 22, 59: 24, 60: 13,
            61: 14, 62: 11, 63: 11, 64: 18, 65: 12, 66: 12, 67: 30, 68: 52, 69: 52, 70: 44,
            71: 28, 72: 28, 73: 20, 74: 56, 75: 40, 76: 31, 77: 50, 78: 40, 79: 46, 80: 42,
            81: 29, 82: 19, 83: 36, 84: 25, 85: 22, 86: 17, 87: 19, 88: 26, 89: 30, 90: 20,
            91: 15, 92: 21, 93: 11, 94: 8, 95: 8, 96: 19, 97: 5, 98: 8, 99: 8, 100: 11,
            101: 11, 102: 8, 103: 3, 104: 9, 105: 5, 106: 4, 107: 7, 108: 3, 109: 6, 110: 3,
            111: 5, 112: 4, 113: 5, 114: 6
        }
        # Sure isimleri (basit dict, T√ºrk√ße kƒ±saltmalar)
        self.sure_names = {
            'fatiha': 1, 'bakara': 2, 'aliimran': 3, 'nisa': 4, 'maide': 5, 'enam': 6, 'araf': 7,
            'enfal': 8, 'tevbe': 9, 'yunus': 10, 'hud': 11, 'yusuf': 12, 'rad': 13, 'ibrahim': 14,
            'hicr': 15, 'nahil': 16, 'isra': 17, 'kehf': 18, 'meryem': 19, 'taha': 20, 'enbiya': 21,
            'hac': 22, 'muminun': 23, 'nur': 24, 'furkan': 25, 'suara': 26, 'neml': 27, 'kasas': 28,
            'ankebut': 29, 'rum': 30, 'lokman': 31, 'secde': 32, 'ahzab': 33, 'seba': 34, 'fatir': 35,
            'yasin': 36, 'saffat': 37, 'sad': 38, 'zumer': 39, 'mumin': 40, 'fussilet': 41, 'sura': 42,
            'zukruf': 43, 'dukhan': 44, 'casiye': 45, 'ahkaf': 46, 'muhammed': 47, 'fetih': 48, 'hucurat': 49,
            'kaf': 50, 'zarciyat': 51, 'tur': 52, 'necm': 53, 'kamer': 54, 'rahman': 55, 'vakia': 56,
            'hadid': 57, 'mucadele': 58, 'hasr': 59, 'mumtahine': 60, 'saff': 61, 'cuma': 62, 'munafikun': 63,
            'tegabun': 64, 'talak': 65, 'tahrim': 66, 'mulk': 67, 'kalem': 68, 'hakka': 69, 'maaric': 70,
            'nuh': 71, 'cin': 72, 'muzzemmil': 73, 'muddessir': 74, 'kiyamet': 75, 'insan': 76, 'mursalat': 77,
            'nebe': 78, 'naziat': 79, 'abese': 80, 'tekvir': 81, 'infitar': 82, 'mutaffifin': 83, 'in≈üikak': 84,
            'buruc': 85, 'tarik': 86, 'ala': 87, 'gasiye': 88, 'fecr': 89, 'balad': 90, '≈üems': 91, 'leyil': 92,
            'duha': 93, 'in≈üirah': 94, 'tin': 95, 'alak': 96, 'kadir': 97, 'beyyine': 98, 'zilzal': 99, 'adiyat': 100,
            'karia': 101, 'tekasur': 102, 'asr': 103, 'humeze': 104, 'fil': 105, 'kureys': 106, 'maun': 107, 'kevser': 108,
            'kafirun': 109, 'nasr': 110, 'tebbet': 111, 'ihlas': 112, 'felak': 113, 'nas': 114
        }
        self.meal_files = self.get_meal_files()
        self.meal_df = None
        self.favorites_meal_df = None  # Favoriler i√ßin T√ºrk√ße meal
        self.arapca_df = None
        self.morph_df = None
        self.transcript_df = None
        # Tema sistemi
        self.current_theme = "light"  # "light" veya "dark"
        self.themes = {}
        self.load_themes()
        self.load_theme_preference()
        self.initUI()
        self.load_data()
        self.load_favorites()
        self.apply_theme()  # Tema uygula
        # K√∂k listesini combo'ya ekle
        if self.kok_df is not None:
            # T√ºm k√∂kleri ekle (performans i√ßin alfabetik sƒ±ralƒ±)
            kok_listesi = sorted(self.kok_df['kelime'].tolist())
            self.root_input.addItems(kok_listesi)
            # QCompleter ekle - t√ºm k√∂klerle arama √∂nerisi
            completer = QCompleter(kok_listesi)
            completer.setCaseSensitivity(Qt.CaseInsensitive)
            completer.setFilterMode(Qt.MatchContains)
            completer.popup().setFont(QFont('Arial Unicode MS', 16))
            completer.popup().setStyleSheet("""
                QListView {
                    font-family: 'Arial Unicode MS';
                    font-size: 16px;
                    padding: 5px;
                }
                QListView::item {
                    padding: 5px;
                    border-bottom: 1px solid #ddd;
                }
                QListView::item:hover {
                    background-color: #e6f3ff;
                }
            """)
            self.root_input.setCompleter(completer)

    def get_verse_count(self, sure):
        return self.verse_counts.get(sure, 0)

    def get_sure_number(self, name):
        name_lower = name.lower().replace(' ', '').replace('ƒ±', 'i').replace('ƒü', 'g').replace('√º', 'u').replace('≈ü', 's').replace('√∂', 'o').replace('√ß', 'c')
        return self.sure_names.get(name_lower, None)

    def parse_input(self, text):
        text = text.strip()
        if '/' in text:
            parts = text.split('/')
            if len(parts) == 2:
                try:
                    sure = int(parts[0])
                    ayet = int(parts[1])
                    return sure, ayet
                except:
                    pass
        elif text.isdigit():
            total = int(text)
            if 1 <= total <= 6236:
                cumulative = 0
                for s in range(1, 115):
                    vc = self.get_verse_count(s)
                    if cumulative + vc >= total:
                        ayet = total - cumulative
                        return s, ayet
                    cumulative += vc
        else:
            parts = text.split()
            if len(parts) == 2:
                sure_name = parts[0]
                ayet_str = parts[1]
                try:
                    ayet = int(ayet_str)
                    sure = self.get_sure_number(sure_name)
                    if sure:
                        return sure, ayet
                except:
                    pass
        return None, None

    def get_meal_files(self):
        folder = 'tum_mealler'
        files = [f for f in os.listdir(folder) if f.endswith('.csv') and 'arapca' not in f.lower() and 'sozl' not in f.lower() and 'mekki' not in f.lower()]
        return files

    def initUI(self):
        # Ara√ß √ßubuƒüu
        self.toolbar = self.addToolBar('Ana Ara√ß √áubuƒüu')
        self.toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Tema ge√ßi≈ü butonu
        self.theme_btn = QPushButton("üåô Karanlƒ±k Tema")
        self.theme_btn.clicked.connect(self.toggle_theme)
        self.theme_btn.setFixedSize(140, 35)
        self.toolbar.addWidget(self.theme_btn)

        self.tabs = QTabWidget()
        # Arama sekmesi
        search_tab = QWidget()
        search_layout = QVBoxLayout()
        top_layout = QHBoxLayout()
        self.meal_combo = QComboBox()
        self.meal_combo.addItems(self.meal_files)
        self.meal_combo.setCurrentText("Abdel_Khalek_Himmat.csv")  # Default T√ºrk√ße meal
        self.meal_combo.currentIndexChanged.connect(self.load_data)
        top_layout.addWidget(QLabel('Me√¢l Se√ß:'))
        top_layout.addWidget(self.meal_combo)
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText('Kelime, ayet numarasƒ± veya sure (√∂rn: namaz, 3/7, 1, kok:ÿßŸÑŸÑŸá)')
        self.search_input.returnPressed.connect(self.search)
        top_layout.addWidget(self.search_input)
        self.ileri_btn = QPushButton("ƒ∞leri")
        self.ileri_btn.clicked.connect(self.on_next_clicked)
        self.ileri_btn.setFixedSize(100, 35)
        self.ileri_btn.setStyleSheet("background-color: #FF5722; color: white; font-weight: bold;")
        top_layout.addWidget(self.ileri_btn)
        self.geri_btn = QPushButton("Geri")
        self.geri_btn.clicked.connect(self.on_prev_clicked)
        self.geri_btn.setFixedSize(100, 35)
        self.geri_btn.setStyleSheet("background-color: #2196F3; color: white; font-weight: bold;")
        top_layout.addWidget(self.geri_btn)
        self.search_btn = QPushButton('Ara')
        self.search_btn.clicked.connect(self.search)
        top_layout.addWidget(self.search_btn)
        search_layout.addLayout(top_layout)
        # Sonu√ßlar i√ßin scrollable alan
        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.results_widget = QWidget()
        self.results_layout = QVBoxLayout()
        self.results_widget.setLayout(self.results_layout)
        self.scroll.setWidget(self.results_widget)
        search_layout.addWidget(self.scroll)
        search_tab.setLayout(search_layout)
        self.tabs.addTab(search_tab, "Arama")
        # K√∂k arama sekmesi
        root_tab = QWidget()
        root_layout = QVBoxLayout()
        root_layout.addWidget(QLabel("K√∂k Arama"))
        self.root_input = QComboBox()
        self.root_input.setEditable(True)
        self.root_input.setPlaceholderText('Arap√ßa k√∂k girin, √∂rn: ÿßŸÑŸÑŸá')
        # Arap√ßa font ayarƒ± - daha b√ºy√ºk ve net g√∂r√ºn√ºm i√ßin
        self.root_input.setFont(QFont('Arial Unicode MS', 16))
        # Combobox popup listesi i√ßin de font ayarƒ±
        self.root_input.setStyleSheet("""
            QComboBox {
                font-family: 'Arial Unicode MS';
                font-size: 16px;
                padding: 5px;
            }
            QComboBox QAbstractItemView {
                font-family: 'Arial Unicode MS';
                font-size: 16px;
                padding: 5px;
            }
        """)
        root_layout.addWidget(self.root_input)
        self.root_btn = QPushButton('K√∂k Ara')
        self.root_btn.clicked.connect(self.root_search)
        root_layout.addWidget(self.root_btn)
        # Arama i√ßeriƒüi a√ßƒ±klamasƒ±
        info_label = QLabel("<b>Arama ƒ∞√ßeriƒüi: Harf, Kelime, Fihristi</b>")
        info_label.setStyleSheet("font-size: 12px; color: #555;")
        root_layout.addWidget(info_label)
        # Osmanlƒ±ca klavye
        keyboard_layout = QGridLayout()
        arabic_letters = ['ÿß','ÿ®','ÿ™','ÿ´','ÿ¨','ÿ≠','ÿÆ','ÿØ','ÿ∞','ÿ±','ÿ≤','ÿ≥','ÿ¥','ÿµ','ÿ∂','ÿ∑','ÿ∏','ÿπ','ÿ∫','ŸÅ','ŸÇ','ŸÉ','ŸÑ','ŸÖ','ŸÜ','Ÿá','Ÿà','Ÿä','ÿ°','Ÿâ']
        row, col = 0, 0
        for letter in arabic_letters:
            btn = QPushButton(letter)
            btn.clicked.connect(lambda checked, char=letter: self.root_input.setEditText(self.root_input.currentText() + char))
            keyboard_layout.addWidget(btn, row, col)
            col += 1
            if col > 9:  # 10 s√ºtun
                col = 0
                row += 1
        root_layout.addLayout(keyboard_layout)
        self.root_results = QTextBrowser()
        self.root_results.setReadOnly(True)
        self.root_results.anchorClicked.connect(self.on_root_link_clicked)
        root_layout.addWidget(self.root_results)
        root_tab.setLayout(root_layout)
        self.tabs.addTab(root_tab, "K√∂k Arama")
        # Harf analizi sekmesi
        letter_tab = QWidget()
        letter_layout = QVBoxLayout()
        letter_layout.addWidget(QLabel("Harf Analizi"))
        self.letter_input = QLineEdit()
        self.letter_input.setPlaceholderText('Sure/Ayet girin, √∂rn: 1/1')
        letter_layout.addWidget(self.letter_input)
        self.letter_btn = QPushButton('Harfleri Say')
        self.letter_btn.clicked.connect(self.letter_analysis)
        letter_layout.addWidget(self.letter_btn)
        self.letter_results = QTextEdit()
        self.letter_results.setReadOnly(True)
        letter_layout.addWidget(self.letter_results)
        letter_tab.setLayout(letter_layout)
        self.tabs.addTab(letter_tab, "Harf Analizi")
        # Meal kar≈üƒ±la≈ütƒ±rma sekmesi
        comparison_tab = QWidget()
        comparison_layout = QVBoxLayout()
        comparison_layout.addWidget(QLabel("Meal Kar≈üƒ±la≈ütƒ±rma"))
        self.meal_list = QListWidget()
        for meal in self.meal_files:
            item = QListWidgetItem(meal)
            item.setCheckState(Qt.Unchecked)
            self.meal_list.addItem(item)
        comparison_layout.addWidget(self.meal_list)
        input_layout = QHBoxLayout()
        input_layout.addWidget(QLabel("Ayet:"))
        self.comp_input = QLineEdit("")
        self.comp_input.setPlaceholderText("6236, 114/4, Nas 6")
        self.comp_input.setMaximumWidth(200)
        self.comp_input.returnPressed.connect(self.compare_meals)
        input_layout.addWidget(self.comp_input)
        self.prev_btn = QPushButton('√ñnceki')
        self.prev_btn.clicked.connect(self.prev_verse)
        input_layout.addWidget(self.prev_btn)
        self.next_btn = QPushButton('Sonraki')
        self.next_btn.clicked.connect(self.next_verse)
        input_layout.addWidget(self.next_btn)
        self.comp_btn = QPushButton('Kar≈üƒ±la≈ütƒ±r')
        self.comp_btn.clicked.connect(self.compare_meals)
        input_layout.addWidget(self.comp_btn)
        comparison_layout.addLayout(input_layout)
        # Vertical layout for comparison results
        self.left_text = QTextEdit()
        self.left_text.setReadOnly(True)
        self.right_text = QTextEdit()
        self.right_text.setReadOnly(True)
        comparison_layout.addWidget(self.left_text)
        comparison_layout.addWidget(self.right_text)
        comparison_tab.setLayout(comparison_layout)
        self.tabs.addTab(comparison_tab, "Meal Kar≈üƒ±la≈ütƒ±rma")
        # Favoriler sekmesi
        favorites_tab = QWidget()
        favorites_layout = QVBoxLayout()

        # √úst kƒ±sƒ±m: Kontroller
        controls_layout = QHBoxLayout()

        # Arama kutusu
        search_label = QLabel("Ara:")
        self.favorites_search = QLineEdit()
        self.favorites_search.setPlaceholderText("Favorilerde ara...")
        self.favorites_search.textChanged.connect(self.filter_favorites)

        # Sƒ±ralama se√ßeneƒüi
        sort_label = QLabel("Sƒ±rala:")
        self.favorites_sort = QComboBox()
        self.favorites_sort.addItems(["Tarih (Yeni-Eski)", "Tarih (Eski-Yeni)", "Sure (Artan)", "Sure (Azalan)", "Ayet (Artan)", "Ayet (Azalan)"])
        self.favorites_sort.currentTextChanged.connect(self.sort_favorites)

        controls_layout.addWidget(search_label)
        controls_layout.addWidget(self.favorites_search)
        controls_layout.addWidget(sort_label)
        controls_layout.addWidget(self.favorites_sort)
        controls_layout.addStretch()

        favorites_layout.addLayout(controls_layout)

        # Favoriler listesi
        self.favorites_list = QListWidget()
        self.favorites_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.favorites_list.customContextMenuRequested.connect(self.show_favorites_context_menu)
        self.favorites_list.itemDoubleClicked.connect(self.show_favorite_ayet)
        favorites_layout.addWidget(self.favorites_list)

        # Alt kƒ±sƒ±m: ƒ∞statistikler ve butonlar
        bottom_layout = QHBoxLayout()

        # ƒ∞statistikler
        stats_group = QGroupBox("ƒ∞statistikler")
        stats_layout = QVBoxLayout()
        self.stats_label = QLabel("Hen√ºz favori yok")
        stats_layout.addWidget(self.stats_label)
        stats_group.setLayout(stats_layout)
        bottom_layout.addWidget(stats_group)

        # Butonlar
        buttons_layout = QVBoxLayout()
        export_btn = QPushButton("Dƒ±≈üa Aktar")
        export_btn.clicked.connect(self.export_favorites)
        clear_btn = QPushButton("T√ºm√ºn√º Temizle")
        clear_btn.clicked.connect(self.clear_all_favorites)
        buttons_layout.addWidget(export_btn)
        buttons_layout.addWidget(clear_btn)
        buttons_layout.addStretch()
        bottom_layout.addLayout(buttons_layout)

        favorites_layout.addLayout(bottom_layout)

        favorites_tab.setLayout(favorites_layout)
        self.tabs.addTab(favorites_tab, "Favoriler")
        # Ayet ve Sure Bilgileri sekmesi
        info_tab = QWidget()
        info_layout = QVBoxLayout()
        info_layout.addWidget(QLabel("Ayet ve Sure Bilgileri"))
        # Sure se√ßimi
        sure_layout = QHBoxLayout()
        sure_layout.addWidget(QLabel("Sure:"))
        self.info_sure_combo = QComboBox()
        self.info_sure_combo.addItems([f"{i} - {self.get_sure_name(i)}" for i in range(1, 115)])
        self.info_sure_combo.currentIndexChanged.connect(self.update_ayet_spin)
        sure_layout.addWidget(self.info_sure_combo)
        # Ayet se√ßimi
        sure_layout.addWidget(QLabel("Ayet:"))
        self.info_ayet_spin = QSpinBox()
        self.info_ayet_spin.setMinimum(1)
        self.info_ayet_spin.setMaximum(7)  # Default Fatiha
        self.info_ayet_spin.valueChanged.connect(self.show_verse_info)
        sure_layout.addWidget(self.info_ayet_spin)
        info_layout.addLayout(sure_layout)
        # Bilgiler g√∂sterimi
        self.info_text = QTextEdit()
        self.info_text.setReadOnly(True)
        info_layout.addWidget(self.info_text)
        # Mekki ve Medeni sureler
        lists_layout = QHBoxLayout()
        self.mekki_list = QListWidget()
        self.mekki_list.setMaximumHeight(200)
        lists_layout.addWidget(QLabel("Mekki Sureler:"))
        lists_layout.addWidget(self.mekki_list)
        self.medeni_list = QListWidget()
        self.medeni_list.setMaximumHeight(200)
        lists_layout.addWidget(QLabel("Medeni Sureler:"))
        lists_layout.addWidget(self.medeni_list)
        info_layout.addLayout(lists_layout)
        # Not ekleme
        info_layout.addWidget(QLabel("Not Ekle:"))
        note_layout = QHBoxLayout()
        note_layout.addWidget(QLabel("Etiket:"))
        self.note_tag = QComboBox()
        self.note_tag.addItems(["Genel", "Tefsir", "Hatƒ±rlatma", "Ara≈ütƒ±rma", "Diƒüer"])
        note_layout.addWidget(self.note_tag)
        info_layout.addLayout(note_layout)
        self.note_text = QTextEdit()
        info_layout.addWidget(self.note_text)
        btn_layout = QHBoxLayout()
        save_note_btn = QPushButton("Notu Kaydet")
        save_note_btn.clicked.connect(self.save_note)
        btn_layout.addWidget(save_note_btn)
        edit_note_btn = QPushButton("D√ºzenle")
        edit_note_btn.clicked.connect(self.edit_note)
        btn_layout.addWidget(edit_note_btn)
        delete_note_btn = QPushButton("Notu Sil")
        delete_note_btn.clicked.connect(self.delete_note)
        btn_layout.addWidget(delete_note_btn)
        info_layout.addLayout(btn_layout)
        info_tab.setLayout(info_layout)
        self.tabs.addTab(info_tab, "Ayet ve Sure Bilgileri")
        self.tabs.addTab(self.create_audio_tab(), "Sesli Tilavet")
        # Ana widget
        self.setCentralWidget(self.tabs)
        self.result_count_label = QLabel("")
        # Status bar'a ekle
        self.statusBar().addWidget(self.result_count_label)
        self.load_data()
        self.populate_lists()

    def load_data(self):
        folder = 'tum_mealler'
        files = [f for f in os.listdir(folder) if f.endswith('.csv') and 'arapca' not in f.lower() and 'sozl' not in f.lower() and 'mekki' not in f.lower()]
        meal_file = self.meal_combo.currentText() if hasattr(self, 'meal_combo') and self.meal_combo.currentText() else (files[0] if files else None)
        files = [f for f in os.listdir(folder) if f.endswith('.csv') and 'arapca' not in f.lower() and 'sozl' not in f.lower() and 'mekki' not in f.lower()]
        meal_file = self.meal_combo.currentText() if hasattr(self, 'meal_combo') and self.meal_combo.currentText() else (files[0] if files else None)
        try:
            if meal_file:
                self.meal_df = pd.read_csv(os.path.join(folder, meal_file), dtype=str, encoding='utf-8-sig', engine='python', quoting=0, on_bad_lines='skip')
        except Exception as e:
            print(f"Exception loading meal_df: {e}")
            self.meal_df = None

        # Favoriler i√ßin T√ºrk√ße meal y√ºkle (Erhan Akta≈ü 10. Baskƒ±)
        favorites_meal_path = os.path.join(folder, 'Erhan_Akta≈ü_(10_Baskƒ±).csv')
        try:
            if os.path.exists(favorites_meal_path):
                self.favorites_meal_df = pd.read_csv(favorites_meal_path, dtype=str, encoding='utf-8-sig', engine='python', quoting=0, on_bad_lines='skip')
            else:
                self.favorites_meal_df = self.meal_df  # Yedek olarak ana meal'i kullan
        except Exception as e:
            print(f"Exception loading favorites_meal_df: {e}")
            self.favorites_meal_df = self.meal_df  # Yedek olarak ana meal'i kullan

        # √ñnce arapca_ayetler.csv'yi dene
        arapca_csv_path = os.path.join(folder, 'arapca_ayetler.csv')
        try:
            if os.path.exists(arapca_csv_path):
                self.arapca_df = pd.read_csv(arapca_csv_path, dtype=str, encoding='utf-8-sig', engine='python', quoting=0, on_bad_lines='skip')
                if self.arapca_df is not None:
                    self.arapca_df['metin'] = self.arapca_df['metin'].apply(lambda x: unicodedata.normalize('NFC', x))
            else:
                self.arapca_df = None
        except Exception as e:
            print(f"Exception loading arapca_df: {e}")
            self.arapca_df = None
        # Transkript i√ßin kuran_meali_abay_yazilisi_6236_besmele.csv'yi y√ºkle
        transcript_csv_path = os.path.join(folder, 'kuran_meali_abay_yazilisi_6236_besmele.csv')
        try:
            if os.path.exists(transcript_csv_path):
                self.transcript_df = pd.read_csv(transcript_csv_path, dtype=str, encoding='utf-8-sig', engine='python', quoting=1, on_bad_lines='skip')
            else:
                self.transcript_df = None
        except Exception as e:
            print(f"Exception loading transcript_df: {e}")
            self.transcript_df = None
        # K√∂k kelime verisini y√ºkle
        kok_csv_path = 'kokkelime.csv'
        try:
            if os.path.exists(kok_csv_path):
                self.kok_df = pd.read_csv(kok_csv_path, header=None, names=['kelime', 'frekans'], dtype=str, encoding='utf-8-sig', engine='python', quoting=3, on_bad_lines='skip')
            else:
                self.kok_df = None
        except Exception as e:
            print(f"Exception loading kok_df: {e}")
            self.kok_df = None
        # Morfoloji verisini y√ºkle
        morph_csv_path = 'morphology.csv'
        try:
            if os.path.exists(morph_csv_path):
                self.morph_df = pd.read_csv(morph_csv_path, dtype=str, encoding='utf-8-sig', engine='python', quoting=3, on_bad_lines='skip')
            else:
                self.morph_df = None
        except Exception as e:
            print(f"Exception loading morph_df: {e}")
            self.morph_df = None
        # Mekki Medeni verisini y√ºkle
        mekki_csv_path = 'mekki_medeni.csv'
        try:
            if os.path.exists(mekki_csv_path):
                self.mekki_df = pd.read_csv(mekki_csv_path, dtype=str, encoding='utf-8-sig', engine='python', quoting=3, on_bad_lines='skip')
            else:
                self.mekki_df = None
        except Exception as e:
            print(f"Exception loading mekki_df: {e}")
            self.mekki_df = None
        # Arap√ßa json y√ºkle
        try:
            with open('quran_arabic_6236.json', 'r', encoding='utf-8') as f:
                self.arapca_json = json.load(f)
        except Exception as e:
            print(f"Exception loading arapca_json: {e}")
            self.arapca_json = []

    def load_favorites(self):
        try:
            with open('favorites.json', 'r', encoding='utf-8') as f:
                self.favorites = json.load(f)
                self.update_favorites_list()
        except:
            self.favorites = []

    def save_favorites(self):
        with open('favorites.json', 'w', encoding='utf-8') as f:
            json.dump(self.favorites, f)

    def add_favorite(self, sure, ayet):
        if (sure, ayet) not in self.favorites:
            self.favorites.append((sure, ayet))
            self.save_favorites()
            self.update_favorites_list()

    def remove_favorite(self, sure, ayet):
        if (sure, ayet) in self.favorites:
            self.favorites.remove((sure, ayet))
            self.save_favorites()
            self.update_favorites_list()

    def update_favorites_list(self):
        self.favorites_list.clear()
        for sure, ayet in self.favorites:
            # Ayetin kƒ±sa metnini al (favoriler i√ßin T√ºrk√ße meal kullan)
            meal_text = ""
            meal_df_to_use = self.favorites_meal_df if self.favorites_meal_df is not None else self.meal_df
            if meal_df_to_use is not None:
                meal_row = meal_df_to_use[(meal_df_to_use['sure'] == str(sure)) & (meal_df_to_use['ayet'] == str(ayet))]
                if not meal_row.empty:
                    meal_text = meal_row.iloc[0]['metin'][:50] + "..." if len(meal_row.iloc[0]['metin']) > 50 else meal_row.iloc[0]['metin']

            # Zengin √∂ƒüe olu≈ütur
            display_text = f"{sure}:{ayet} - {meal_text}"
            item = QListWidgetItem(display_text)
            item.setToolTip(f"Sure {sure}, Ayet {ayet}\n{meal_text}")
            self.favorites_list.addItem(item)

        self.update_favorites_stats()

    def show_favorite_ayet(self, item):
        text = item.text()
        # "sure:ayet - meal_text" formatƒ±ndan sure:ayet kƒ±smƒ±nƒ± al
        sure_ayet_part = text.split(' - ')[0]
        sure, ayet = sure_ayet_part.split(':')
        sure = int(sure)
        ayet = int(ayet)
        self.on_root_link_clicked(f"{sure}/{ayet}")

    def update_favorites_stats(self):
        if not self.favorites:
            self.stats_label.setText("Hen√ºz favori yok")
            return

        total_favs = len(self.favorites)
        sure_counts = {}
        for sure, ayet in self.favorites:
            sure_counts[sure] = sure_counts.get(sure, 0) + 1

        most_fav_sure = max(sure_counts.items(), key=lambda x: x[1]) if sure_counts else (0, 0)
        sure_name = self.get_sure_name(most_fav_sure[0]) if most_fav_sure[0] else "Bilinmiyor"

        stats_text = f"""Toplam Favori: {total_favs}
En √áok Favorilenen Sure: {most_fav_sure[0]} - {sure_name} ({most_fav_sure[1]} ayet)
Farklƒ± Sure Sayƒ±sƒ±: {len(sure_counts)}"""

        self.stats_label.setText(stats_text)

    def filter_favorites(self):
        search_text = self.favorites_search.text().lower()
        for i in range(self.favorites_list.count()):
            item = self.favorites_list.item(i)
            item.setHidden(search_text not in item.text().lower())

    def sort_favorites(self):
        sort_type = self.favorites_sort.currentText()

        if sort_type == "Tarih (Yeni-Eski)":
            # Favoriler listesi zaten eklenme sƒ±rasƒ±na g√∂re
            pass
        elif sort_type == "Tarih (Eski-Yeni)":
            self.favorites.reverse()
        elif sort_type == "Sure (Artan)":
            self.favorites.sort(key=lambda x: x[0])
        elif sort_type == "Sure (Azalan)":
            self.favorites.sort(key=lambda x: x[0], reverse=True)
        elif sort_type == "Ayet (Artan)":
            self.favorites.sort(key=lambda x: x[1])
        elif sort_type == "Ayet (Azalan)":
            self.favorites.sort(key=lambda x: x[1], reverse=True)

        self.update_favorites_list()

    def export_favorites(self):
        from PyQt5.QtWidgets import QFileDialog
        filename, _ = QFileDialog.getSaveFileName(self, "Favorileri Dƒ±≈üa Aktar", "", "JSON Files (*.json);;CSV Files (*.csv)")

        if filename:
            if filename.endswith('.json'):
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.favorites, f, indent=2)
            elif filename.endswith('.csv'):
                import csv
                with open(filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(['Sure', 'Ayet', 'Metin'])
                    meal_df_to_use = self.favorites_meal_df if self.favorites_meal_df is not None else self.meal_df
                    for sure, ayet in self.favorites:
                        meal_text = ""
                        if meal_df_to_use is not None:
                            meal_row = meal_df_to_use[(meal_df_to_use['sure'] == str(sure)) & (meal_df_to_use['ayet'] == str(ayet))]
                            if not meal_row.empty:
                                meal_text = meal_row.iloc[0]['metin']
                        writer.writerow([sure, ayet, meal_text])

    def clear_all_favorites(self):
        reply = QMessageBox.question(self, 'T√ºm Favorileri Temizle',
                                   'T√ºm favori ayetleri kaldƒ±rmak istediƒüinizden emin misiniz?',
                                   QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.favorites.clear()
            self.save_favorites()
            self.update_favorites_list()

    def load_themes(self):
        """Tema dosyalarƒ±nƒ± y√ºkle"""
        import os
        themes_dir = "themes"
        if not os.path.exists(themes_dir):
            os.makedirs(themes_dir)

        # Varsayƒ±lan temalarƒ± y√ºkle
        self.themes = {}  # Temizle

        self.themes["light"] = {
            "name": "A√ßƒ±k Tema",
            "is_dark": False,
            "colors": {
                "primary": "#4CAF50",
                "secondary": "#2196F3",
                "accent": "#FF9800",
                "background": "#f5f5f5",
                "surface": "#ffffff",
                "text": "#212121",
                "text_secondary": "#757575",
                "border": "#e0e0e0",
                "hover": "#f0f0f0",
                "selected": "#e3f2fd",
                "error": "#f44336",
                "success": "#4CAF50",
                "warning": "#FF9800"
            }
        }

        self.themes["dark"] = {
            "name": "Karanlƒ±k Tema",
            "is_dark": True,
            "colors": {
                "primary": "#81C784",
                "secondary": "#64B5F6",
                "accent": "#FFB74D",
                "background": "#121212",
                "surface": "#1e1e1e",
                "text": "#ffffff",
                "text_secondary": "#b0b0b0",
                "border": "#333333",
                "hover": "#2a2a2a",
                "selected": "#333333",
                "error": "#ef5350",
                "success": "#81C784",
                "warning": "#FFB74D"
            }
        }

        print(f"Temalar y√ºklendi: {list(self.themes.keys())}")  # Debug

    def apply_theme(self):
        """Mevcut temayƒ± uygula"""
        if self.current_theme not in self.themes:
            return

        theme = self.themes[self.current_theme]
        colors = theme["colors"]

        # Qt Style Sheet olu≈ütur
        qss = f"""
        QMainWindow {{
            background-color: {colors['background']};
            color: {colors['text']};
        }}

        QTabWidget::pane {{
            border: 1px solid {colors['border']};
            background-color: {colors['surface']};
        }}

        QTabBar::tab {{
            background-color: {colors['background']};
            color: {colors['text']};
            padding: 8px 16px;
            border: 1px solid {colors['border']};
            margin-right: 2px;
            border-radius: 4px;
        }}

        QTabBar::tab:selected {{
            background-color: {colors['surface']};
            border-bottom: 2px solid {colors['primary']};
        }}

        QTabBar::tab:hover {{
            background-color: {colors['hover']};
        }}

        QListWidget {{
            background-color: {colors['surface']};
            color: {colors['text']};
            border: 1px solid {colors['border']};
            border-radius: 4px;
        }}

        QListWidget::item:hover {{
            background-color: {colors['hover']};
        }}

        QListWidget::item:selected {{
            background-color: {colors['selected']};
        }}

        QPushButton {{
            background-color: {colors['surface']};
            color: {colors['text']};
            border: 1px solid {colors['border']};
            padding: 6px 12px;
            border-radius: 4px;
        }}

        QPushButton:hover {{
            background-color: {colors['hover']};
        }}

        QPushButton:pressed {{
            background-color: {colors['selected']};
        }}

        QLineEdit {{
            background-color: {colors['surface']};
            color: {colors['text']};
            border: 1px solid {colors['border']};
            padding: 4px;
            border-radius: 4px;
        }}

        QComboBox {{
            background-color: {colors['surface']};
            color: {colors['text']};
            border: 1px solid {colors['border']};
            padding: 4px;
            border-radius: 4px;
        }}

        QComboBox::drop-down {{
            border: none;
        }}

        QGroupBox {{
            font-weight: bold;
            border: 2px solid {colors['border']};
            border-radius: 5px;
            margin-top: 1ex;
            color: {colors['text']};
        }}

        QGroupBox::title {{
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 5px 0 5px;
        }}

        QTextEdit {{
            background-color: {colors['surface']};
            color: {colors['text']};
            border: 1px solid {colors['border']};
            border-radius: 4px;
        }}

        QLabel {{
            color: {colors['text']};
        }}

        QScrollBar:vertical {{
            background-color: {colors['background']};
            width: 12px;
            border-radius: 6px;
        }}

        QScrollBar::handle:vertical {{
            background-color: {colors['border']};
            border-radius: 6px;
        }}

        QScrollBar::handle:vertical:hover {{
            background-color: {colors['text_secondary']};
        }}
        """

        # QApplication'a QSS uygula
        self.app.setStyleSheet(qss)

        # Tema buton metnini g√ºncelle
        theme_name = self.themes[self.current_theme]["name"]
        icon = "‚òÄÔ∏è" if self.current_theme == "light" else "üåô"
        self.theme_btn.setText(f"{icon} {theme_name}")

        # √ñzel widget'lar i√ßin ek stiller
        self.update_widget_styles()

    def update_widget_styles(self):
        """√ñzel widget'lar i√ßin tema stillerini g√ºncelle"""
        theme = self.themes[self.current_theme]
        colors = theme["colors"]

        # Favori butonlarƒ± i√ßin √∂zel stiller
        fav_button_style = f"""
        QPushButton {{
            background-color: {colors['accent']};
            color: {'#000000' if theme['is_dark'] else '#ffffff'};
            font-weight: bold;
            font-size: 12px;
            padding: 8px 12px;
            border: 2px solid {colors['primary']};
            border-radius: 5px;
        }}
        QPushButton:hover {{
            background-color: {colors['primary']};
        }}
        QPushButton:pressed {{
            background-color: {colors['secondary']};
        }}
        """

        # Arama sonu√ßlarƒ±ndaki oynat butonlarƒ±
        play_button_style = f"""
        QPushButton {{
            background-color: {colors['success']};
            color: white;
            font-weight: bold;
            font-size: 12px;
            padding: 8px 12px;
            border: 2px solid {colors['primary']};
            border-radius: 5px;
        }}
        QPushButton:hover {{
            background-color: {colors['primary']};
        }}
        QPushButton:pressed {{
            background-color: {colors['secondary']};
        }}
        """

        # T√ºm butonlarƒ± g√ºncelle (bu biraz agresif olabilir, ama √ßalƒ±≈üƒ±r)
        for button in self.findChildren(QPushButton):
            if "Favoriye Ekle" in button.text():
                button.setStyleSheet(fav_button_style)
            elif "‚ñ∂ Oynat" in button.text():
                button.setStyleSheet(play_button_style)

    def toggle_theme(self):
        """Tema deƒüi≈ütir"""
        self.current_theme = "dark" if self.current_theme == "light" else "light"
        self.apply_theme()
        # Tema buton metnini g√ºncelle
        theme_name = self.themes[self.current_theme]["name"]
        icon = "‚òÄÔ∏è" if self.current_theme == "light" else "üåô"
        self.theme_btn.setText(f"{icon} {theme_name}")
        # Tema tercihini kaydet
        self.save_theme_preference()

    def save_theme_preference(self):
        """Tema tercihini kaydet"""
        try:
            with open('theme_preference.json', 'w', encoding='utf-8') as f:
                json.dump({"current_theme": self.current_theme}, f)
        except Exception as e:
            print(f"Tema tercihi kaydetme hatasƒ±: {e}")

    def load_theme_preference(self):
        """Tema tercihini y√ºkle"""
        try:
            with open('theme_preference.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.current_theme = data.get("current_theme", "light")
        except:
            self.current_theme = "light"

    def show_favorites_context_menu(self, position):
        menu = QMenu()
        remove_action = menu.addAction("Kaldƒ±r")
        copy_action = menu.addAction("Metni Kopyala")
        export_action = menu.addAction("Bu Ayeti Dƒ±≈üa Aktar")

        action = menu.exec_(self.favorites_list.mapToGlobal(position))
        if action == remove_action:
            item = self.favorites_list.itemAt(position)
            if item:
                text = item.text()
                sure, ayet = text.split(':')[0], text.split(':')[1].split(' - ')[0]
                self.remove_favorite(int(sure), int(ayet))
        elif action == copy_action:
            item = self.favorites_list.itemAt(position)
            if item:
                QApplication.clipboard().setText(item.toolTip())
        elif action == export_action:
            item = self.favorites_list.itemAt(position)
            if item:
                text = item.text()
                sure, ayet = text.split(':')[0], text.split(':')[1].split(' - ')[0]
                sure, ayet = int(sure), int(ayet)

                filename, _ = QFileDialog.getSaveFileName(self, f"Ayet {sure}:{ayet} Dƒ±≈üa Aktar", "", "Text Files (*.txt)")
                if filename:
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(f"Ayet {sure}:{ayet}\n\n")
                        meal_df_to_use = self.favorites_meal_df if self.favorites_meal_df is not None else self.meal_df
                        if meal_df_to_use is not None:
                            meal_row = meal_df_to_use[(meal_df_to_use['sure'] == str(sure)) & (meal_df_to_use['ayet'] == str(ayet))]
                            if not meal_row.empty:
                                f.write(f"T√ºrk√ße: {meal_row.iloc[0]['metin']}\n\n")

                        arapca = self.get_arabic_text(sure, ayet)
                        if arapca:
                            f.write(f"Arap√ßa: {arapca}\n\n")

                        transcript = self.get_transcript_text(sure, ayet)
                        if transcript:
                            f.write(f"Transkript: {transcript}\n")

    def populate_lists(self):
        if self.mekki_df is not None:
            mekki = self.mekki_df[self.mekki_df['tur'] == 'Mekki']
            medeni = self.mekki_df[self.mekki_df['tur'] == 'Medeni']
            for _, row in mekki.iterrows():
                self.mekki_list.addItem(f"{row['sure']} - {row['sure_adi']}")
            for _, row in medeni.iterrows():
                self.medeni_list.addItem(f"{row['sure']} - {row['sure_adi']}")

    def get_arabic_text(self, sure, ayet):
        # √ñnce arapca_ayetler.csv'den al
        if self.arapca_df is not None:
            match = self.arapca_df[(self.arapca_df['sure'] == str(sure)) & (self.arapca_df['ayet'] == str(ayet))]
            if not match.empty:
                return match.iloc[0]['metin']
        # Eksikse quran_arabic_6236.json'dan al
        if self.arapca_json:
            for item in self.arapca_json:
                if str(item.get('sure')) == str(sure) and str(item.get('ayet')) == str(ayet):
                    return item.get('metin')
        return ''

    def get_transcript_text(self, sure, ayet):
        # kuran_meali_abay_yazilisi_6236_besmele.csv'den al
        if self.transcript_df is not None:
            match = self.transcript_df[(self.transcript_df['Sure'] == str(sure)) & (self.transcript_df['Ayet'] == str(ayet))]
            if not match.empty:
                return match.iloc[0]['Metin']
        return ''

    def highlight_text(self, text, keyword):
        if not keyword:
            return text
        # Metni ve keyword'i normalize et
        normalized_text = self.normalize_text(text)
        normalized_keyword = self.normalize_text(keyword)
        # Case insensitive vurgu
        pattern = re.compile(re.escape(normalized_keyword), re.IGNORECASE)
        # Orijinal metinde vurgula
        highlighted_normalized = pattern.sub(f'<span style="background-color: yellow;">\\g<0></span>', normalized_text)
        # Ama vurgulanmƒ±≈ü kƒ±sƒ±mlarƒ± orijinal metinden al
        # Bu karma≈üƒ±k, basit√ße orijinal text'te normalized_keyword ile ara
        # Ama normalized_keyword orijinal text'te olmayabilir
        # Daha iyi: normalized_text'te highlight yap, ama span i√ßinde orijinal karakterleri kullan
        # Bu zor, basit√ße normalized_text'te highlight yap, ama kullanƒ±cƒ±ya g√∂sterirken sorun olmaz mƒ±?
        # Hayƒ±r, √ß√ºnk√º highlight sadece g√∂r√ºn√ºm i√ßin, ama text normalize edilmi≈ü olmaz.
        # Aslƒ±nda, highlight HTML'de yapƒ±lƒ±r, ama text normalize edilmi≈ü olmaz.
        # Daha iyi yol: text'i normalize et, highlight yap, ama span i√ßinde normalize edilmi≈ü kƒ±smƒ± kullan.
        # Ama kullanƒ±cƒ± normalize edilmi≈ü text g√∂rmek istemez.
        # Doƒüru yol: orijinal text'te, normalize edilmi≈ü keyword'e kar≈üƒ±lƒ±k gelen orijinal substring'i bul.
        # Bu regex ile zor.
        # Basit yol: text'i normalize et, highlight yap, ama span'larƒ± orijinal text'e map et.
        # √áok karma≈üƒ±k.
        # Alternatif: highlight_text'i deƒüi≈ütir, text'i normalize etmeden, keyword'i normalize et, ama case insensitive ile ara.
        # Ama √∂zel karakterler i√ßin case insensitive √ßalƒ±≈ümaz.
        # re.IGNORECASE sadece ASCII i√ßin.
        # Bu y√ºzden normalize gerekli.
        # En iyi: text'i normalize et, highlight yap, ama HTML'de span'larƒ± orijinal text'e g√∂re ayarla.
        # Ama bu √ßok zor.
        # Basit √ß√∂z√ºm: arama normalize ile, highlight da normalize edilmi≈ü text'te normalize edilmi≈ü keyword ile, ama kullanƒ±cƒ±ya normalize edilmi≈ü text g√∂ster.
        # Ama kullanƒ±cƒ± orijinal text g√∂rmek istiyor.
        # Bu y√ºzden, highlight_text'te text'i normalize et, highlight yap, ama span i√ßinde orijinal karakterleri kullan.
        # Nasƒ±l?
        # pattern.sub ile, ama sub fonksiyonu kullan, orijinal text'ten al.
        # Evet, pattern normalized_text'te √ßalƒ±≈üƒ±r, ama sub fonksiyonunda orijinal text'ten karakterleri al.
        # Bu m√ºmk√ºn deƒüil kolayca.
        # Daha basit: highlight_text'i iki parametre al, normalized_text ve orijinal_text, ama karma≈üƒ±k.
        # Alternatif: highlight_text i√ßinde text'i normalize et, highlight yap, d√∂nd√ºr, ama kullanƒ±cƒ± normalize edilmi≈ü text g√∂r√ºr, ama highlight ile.
        # Ama orijinal karakterler korunur mu? Normalize sadece deƒüi≈ütirir, ama highlight span ekler.
        # Hayƒ±r, normalize '√¢' -> 'a' yapar, kullanƒ±cƒ± 'a' g√∂r√ºr.
        # Bu yanlƒ±≈ü.
        # Doƒüru yol: highlight_text'i deƒüi≈ütir, keyword'i normalize et, text'i normalize etme, ama pattern ile ara, ama √∂zel karakterler i√ßin.
        # re.IGNORECASE √ßalƒ±≈ümaz '√¢' i√ßin.
        # Bu y√ºzden, text'i normalize et, highlight yap, ama span'larƒ± orijinal text'e map et.
        # Nasƒ±l?
        # normalized_text'te match bul, pozisyon al, orijinal text'te aynƒ± pozisyonda span ekle.
        # Evet, bu m√ºmk√ºn.
        # Ama karma≈üƒ±k.
        # Basit √ß√∂z√ºm: normalize_text'i kullan, ama highlight i√ßin orijinal keyword ile ara, case insensitive ile, ama √∂zel karakterler i√ßin normalize kullan.
        # Ama '√¢' ve 'a' farklƒ±.
        # Kullanƒ±cƒ± "amnetu" aradƒ±, "√¢mentu" bulundu, highlight "√¢mentu" i√ßinde "√¢mentu" yi highlight etmeli, ama keyword "amnetu".
        # Bu y√ºzden, highlight_text'te keyword'i normalize etme, text'i normalize etme, ama pattern ile re.escape(keyword), re.IGNORECASE, ama '√¢' != 'a'.
        # Bu √ßalƒ±≈ümaz.
        # √á√∂z√ºm: highlight_text'te text'i normalize et, keyword'i normalize et, highlight yap, ama d√∂nd√ºr√ºlen HTML'de span'larƒ± orijinal text'e g√∂re ayarla.
        # Nasƒ±l?
        # normalized_text'te pattern.sub yap, ama sub fonksiyonunda, match.start() ve match.end() al, orijinal text'ten o pozisyondaki substring'i al, span i√ßine koy.
        # Evet, bu √ßalƒ±≈üƒ±r.
        # Python'da pattern.sub(lambda m: f'<span...>{text[m.start():m.end()]}</span>', normalized_text)
        # Evet!
        # text orijinal, normalized_text normalize edilmi≈ü.
        # pattern normalized_keyword ile normalized_text'te √ßalƒ±≈üƒ±r.
        # sub lambda ile, m.start() ve m.end() ile orijinal text'ten al.
        # Evet. 

        normalized_text = self.normalize_text(text)
        normalized_keyword = self.normalize_text(keyword)
        pattern = re.compile(re.escape(normalized_keyword), re.IGNORECASE)
        def replacer(match):
            start = match.start()
            end = match.end()
            original_part = text[start:end]  # orijinal text'ten al
            return f'<span style="background-color: yellow; font-weight: bold; font-size: 14px;">{original_part}</span>'
        return pattern.sub(replacer, normalized_text)

    def normalize_text(self, text):
        # T√ºrk√ße karakterleri normalize et
        normalize_map = {
            '√¢': 'a', '√Ç': 'a', '√Æ': 'i', '√é': 'i', '√ª': 'u', '√õ': 'u',
            '≈ü': 's', '≈û': 's', 'ƒü': 'g', 'ƒû': 'g', '√º': 'u', '√ú': 'u',
            '√∂': 'o', '√ñ': 'o', '√ß': 'c', '√á': 'c', 'ƒ±': 'i', 'ƒ∞': 'i'
        }
        for old, new in normalize_map.items():
            text = text.replace(old, new)
        return text.lower()

    def normalize_arabic(self, text):
        for harf in self.harekeler:
            text = text.replace(harf, '')
        return text

    def search(self):
        # √ñnceki sonu√ßlarƒ± temizle
        for i in reversed(range(self.results_layout.count())):
            widget = self.results_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
        self.result_count_label.setText("")
        orijinal_keyword = self.search_input.text().strip()
        keyword = self.normalize_text(orijinal_keyword)
        if not keyword:
            return
        # Harf arama kontrol√º: tek harf Arap√ßa ise, o harfle ba≈ülayan k√∂kleri g√∂ster
        arabic_letters = ['ÿß','ÿ®','ÿ™','ÿ´','ÿ¨','ÿ≠','ÿÆ','ÿØ','ÿ∞','ÿ±','ÿ≤','ÿ≥','ÿ¥','ÿµ','ÿ∂','ÿ∑','ÿ∏','ÿπ','ÿ∫','ŸÅ','ŸÇ','ŸÉ','ŸÑ','ŸÖ','ŸÜ','Ÿá','Ÿà','Ÿä','ÿ°','Ÿâ']
        if len(orijinal_keyword) == 1 and orijinal_keyword in arabic_letters:
            if self.kok_df is not None:
                starting_roots = self.kok_df[self.kok_df['kelime'].str.startswith(orijinal_keyword)]
                if not starting_roots.empty:
                    for _, row in starting_roots.head(10).iterrows():  # ƒ∞lk 10 k√∂k√º g√∂ster
                        kok = row['kelime']
                        frekans = row['frekans']
                        # K√∂k i√ßin ayetleri bul
                        arapca_matches = []
                        if self.arapca_df is not None:
                            found = self.arapca_df[self.arapca_df['metin'].apply(self.normalize_arabic).str.contains(re.escape(kok), regex=True, na=False)]
                            for _, arow in found.iterrows():
                                match = self.meal_df[(self.meal_df['sure'] == arow['sure']) & (self.meal_df['ayet'] == arow['ayet'])]
                                if not match.empty:
                                    arapca_matches.append({'meal': match.iloc[0], 'arapca': arow['metin']})
                        results = pd.DataFrame(arapca_matches)
                        # Sonu√ßlarƒ± g√∂ster
                        text = f"<h3>K√∂k '{kok}' (Harf: {orijinal_keyword}) ebced: {sum(self.ebced.get(h, 0) for h in kok)}, frekans: {frekans}</h3>"
                        text += f"<p>Bulunan ayet sayƒ±sƒ±: {len(results)}</p>"
                        for _, r in results.iterrows():
                            arapca_text = r['arapca']
                            normalized = self.normalize_arabic(arapca_text)
                            ayet_ebced = sum(self.ebced.get(harf, 0) for harf in normalized)
                            text += f"<h4>{r['meal']['sure']}:{r['meal']['ayet']}</h4>"
                            text += f"<p><b>Arap√ßa:</b> {self.highlight_text(arapca_text, kok)}</p>"
                            text += f"<p><b>T√ºrk√ße:</b> {self.highlight_text(r['meal']['metin'], orijinal_keyword)}</p>"
                            text += f"<p><b>Ayet Ebced:</b> {ayet_ebced}</p>"
                            text += "<hr>"
                        # Sonu√ß kutusu ekle
                        result_box = QFrame()
                        result_box.setFrameStyle(QFrame.Box)
                        result_layout = QVBoxLayout()
                        result_text = QTextEdit()
                        result_text.setReadOnly(True)
                        result_text.setHtml(text)
                        result_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                        result_layout.addWidget(result_text)
                        result_box.setLayout(result_layout)
                        self.results_layout.addWidget(result_box)
                    self.result_count_label.setText(f"{len(starting_roots)} k√∂k bulundu (ilk 10 g√∂sterildi)")
                    return
        # K√∂k arama kontrol√º
        if orijinal_keyword.startswith('kok:'):
            kok = orijinal_keyword[4:].strip()
            if self.morph_df is not None:
                kok_row = self.morph_df[self.morph_df['kelime'] == kok]
                if not kok_row.empty:
                    frekans = kok_row['frekans'].values[0]
                    # K√∂k i√ßeren ayetleri bul
                    arapca_matches = []
                    if self.arapca_df is not None:
                        found = self.arapca_df[self.arapca_df['metin'].str.contains(kok, na=False)]
                        for _, arow in found.iterrows():
                            match = self.meal_df[(self.meal_df['sure'] == arow['sure']) & (self.meal_df['ayet'] == arow['ayet'])]
                            if not match.empty:
                                arapca_matches.append(match.iloc[0])
                    results = pd.DataFrame(arapca_matches)
                    self.result_count_label.setText(f"K√∂k '{kok}' {frekans} kez ge√ßiyor, {len(results)} ayet bulundu")
                    self.show_results(results, kok)
                    return
                else:
                    self.result_count_label.setText(f"K√∂k '{kok}' bulunamadƒ±")
                    return
            else:
                self.result_count_label.setText("K√∂k verisi y√ºklenemedi")
                return
        else:
            # Normal arama
            # Ayet/sure arama
            sure, ayet = self.parse_input(orijinal_keyword)
            if sure and ayet:
                # Tek ayet g√∂ster
                results = self.meal_df[(self.meal_df['sure'] == str(sure)) & (self.meal_df['ayet'] == str(ayet))]
            elif keyword.isdigit():
                results = self.meal_df[self.meal_df['sure'] == int(keyword)]
            else:
                # Normalize edilmi≈ü metinlerde ara
                results = self.meal_df[self.meal_df['metin'].apply(self.normalize_text).str.contains(keyword, na=False)]
                arapca_matches = []
                if self.arapca_df is not None:
                    arapca_found = self.arapca_df[self.arapca_df['metin'].apply(self.normalize_text).str.contains(keyword, na=False)]
                    for _, arow in arapca_found.iterrows():
                        match = self.meal_df[(self.meal_df['sure'] == arow['sure']) & (self.meal_df['ayet'] == arow['ayet'])]
                        if not match.empty:
                            arapca_matches.append(match.iloc[0])
                # Transkript'te ara
                transcript_matches = []
                if self.transcript_df is not None:
                    transcript_found = self.transcript_df[self.transcript_df['Metin'].apply(self.normalize_text).str.contains(keyword, na=False)]
                    for _, trow in transcript_found.iterrows():
                        match = self.meal_df[(self.meal_df['sure'] == str(trow['Sure'])) & (self.meal_df['ayet'] == str(trow['Ayet']))]
                        if not match.empty:
                            transcript_matches.append(match.iloc[0])
                if arapca_matches or transcript_matches:
                    results = pd.concat([results, pd.DataFrame(arapca_matches + transcript_matches)], ignore_index=True).drop_duplicates()
            self.show_results(results, keyword)

    def show_results(self, results, keyword):
        for _, row in results.iterrows():
            arapca_raw = self.get_arabic_text(row['sure'], row['ayet'])
            arapca = ''
            transcript = self.get_transcript_text(row['sure'], row['ayet'])
            if arapca_raw:
                reshaped = arabic_reshaper.reshape(arapca_raw)
                arapca = reshaped
            # Sonu√ß kutusu: T√ºrk√ße, Arap√ßa ve Transkript ayrƒ± kutucuklarda
            result_box = QFrame()
            result_box.setFrameStyle(QFrame.Box)
            result_layout = QVBoxLayout()
            # Play butonu
            s = str(row['sure'])
            a = str(row['ayet'])
            play_btn = QPushButton("‚ñ∂ Oynat")
            play_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    font-weight: bold;
                    font-size: 12px;
                    padding: 8px 12px;
                    border: 2px solid #45a049;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QPushButton:pressed {
                    background-color: #3e8e41;
                }
            """)
            play_btn.setFixedSize(100, 35)
            play_btn.clicked.connect(lambda checked, s=s, a=a: self.play_verse_audio(int(s), int(a)))
            result_layout.addWidget(play_btn)
            # T√ºrk√ße kutucuk
            turk_group = QGroupBox("T√ºrk√ße Me√¢l")
            turk_layout = QVBoxLayout()
            turk_text = QTextEdit()
            turk_text.setReadOnly(True)
            turk_text.setFont(self.font_turkish)
            turk_text.setHtml(self.highlight_text(f"[{row['sira']}] {row['sure']}/{row['ayet']}\n{row['metin']}", keyword))
            turk_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
            turk_layout.addWidget(turk_text)
            turk_group.setLayout(turk_layout)
            result_layout.addWidget(turk_group)
            # Arap√ßa kutucuk
            if arapca:
                arap_group = QGroupBox("Arap√ßa Metin")
                arap_layout = QVBoxLayout()
                arap_text = QTextEdit()
                arap_text.setReadOnly(True)
                arap_text.setFont(self.font_arabic)
                arap_text.setHtml(self.highlight_text(arapca, keyword))
                arap_text.setAlignment(Qt.AlignRight)
                arap_text.setLayoutDirection(Qt.RightToLeft)
                arap_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                arap_layout.addWidget(arap_text)
                # Ayet ebced hesapla
                normalized = self.normalize_arabic(arapca_raw)
                ayet_ebced = sum(self.ebced.get(harf, 0) for harf in normalized)
                ebced_label = QLabel(f"Ayet Ebced: {ayet_ebced}")
                arap_layout.addWidget(ebced_label)
                arap_group.setLayout(arap_layout)
                result_layout.addWidget(arap_group)
            # Transkript kutucuk
            if transcript:
                trans_group = QGroupBox("Transkript (Abay Yazƒ±lƒ±≈üƒ±)")
                trans_layout = QVBoxLayout()
                trans_text = QTextEdit()
                trans_text.setReadOnly(True)
                trans_text.setFont(self.font_turkish)
                trans_text.setHtml(self.highlight_text(transcript, keyword))
                trans_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                trans_layout.addWidget(trans_text)
                trans_group.setLayout(trans_layout)
                result_layout.addWidget(trans_group)
            # Favoriye Ekle butonu
            fav_btn = QPushButton("‚≠ê Favoriye Ekle")
            fav_btn.setStyleSheet("""
                QPushButton {
                    background-color: #FFD700;
                    color: black;
                    font-weight: bold;
                    font-size: 12px;
                    padding: 8px 12px;
                    border: 2px solid #FFA500;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #FFA500;
                }
                QPushButton:pressed {
                    background-color: #FF8C00;
                }
            """)
            fav_btn.setFixedSize(150, 35)
            fav_btn.clicked.connect(lambda checked, s=row['sure'], a=row['ayet']: self.add_favorite(s, a))
            result_layout.addWidget(fav_btn)
            result_box.setLayout(result_layout)
            self.results_layout.addWidget(result_box)
        self.result_count_label.setText(f"{len(results)} sonu√ß bulundu")

    def on_next_clicked(self):
        sure, ayet = self.parse_input(self.search_input.text())
        if sure and ayet:
            max_ayet = self.get_verse_count(sure)
            if ayet < max_ayet:
                ayet += 1
            else:
                sure += 1
                if sure > 114:
                    sure = 1
                ayet = 1
            self.search_input.setText(f"{sure}/{ayet}")
            self.search()
        print("Next button clicked")

    def on_prev_clicked(self):
        sure, ayet = self.parse_input(self.search_input.text())
        if sure and ayet:
            if ayet > 1:
                ayet -= 1
            else:
                sure -= 1
                if sure < 1:
                    sure = 114
                ayet = self.get_verse_count(sure)
            self.search_input.setText(f"{sure}/{ayet}")
            self.search()
        print("Prev button clicked")

    def root_search(self):
        kok = self.root_input.currentText().strip()
        if not kok:
            self.root_results.setText("K√∂k girin.")
            return
        kok = self.normalize_arabic(kok)  # Hareke √ßƒ±kar
        if self.kok_df is None:
            self.root_results.setText("K√∂k verisi y√ºklenemedi.")
            return
        kok_row = self.kok_df[self.kok_df['kelime'] == kok]
        if kok_row.empty:
            self.root_results.setText(f"K√∂k '{kok}' bulunamadƒ±.")
            return
        frekans = kok_row['frekans'].values[0]
        kok_ebced = sum(self.ebced.get(harf, 0) for harf in kok)
        # Morfoloji bilgisi
        morph_info = ""
        if self.morph_df is not None:
            morph_row = self.morph_df[self.morph_df['kelime'] == kok]
            if not morph_row.empty:
                tur = morph_row['tur'].values[0]
                aciklama = morph_row['aciklama'].values[0]
                morph_info = f", T√ºr: {tur}, A√ßƒ±klama: {aciklama}"
        text = f"<h3>K√∂k '{kok}' ebced: {kok_ebced}, frekans: {frekans}{morph_info}</h3>"
        # K√∂k i√ßeren ayetleri bul
        arapca_matches = []
        found = pd.DataFrame()  # default empty
        if self.arapca_df is not None:
            found = self.arapca_df[self.arapca_df['metin'].apply(self.normalize_arabic).str.contains(re.escape(kok), regex=True, na=False)]
            for _, arow in found.iterrows():
                match = self.meal_df[(self.meal_df['sure'] == arow['sure']) & (self.meal_df['ayet'] == arow['ayet'])]
                if not match.empty:
                    arapca_matches.append({'meal': match.iloc[0], 'arapca': arow['metin']})
        results = pd.DataFrame(arapca_matches)
        text += f"<p>Bulunan satƒ±r sayƒ±sƒ±: {len(found)}</p><p>{len(results)} ayet bulundu.</p>"
        for _, row in results.iterrows():
            arapca_text = row['arapca']
            normalized = self.normalize_arabic(arapca_text)
            ayet_ebced = sum(self.ebced.get(harf, 0) for harf in normalized)
            text += f"<h4><a href='{row['meal']['sure']}/{row['meal']['ayet']}'>{row['meal']['sure']}:{row['meal']['ayet']}</a></h4>"
            text += f"<p><b>Arap√ßa:</b> <span style='font-size: 16px; font-family: Arial Unicode MS;'>{arapca_text}</span></p>"
            text += f"<p><b>T√ºrk√ße:</b> {row['meal']['metin']}</p>"
            text += f"<p><b>Ayet Ebced:</b> {ayet_ebced}</p>"
            text += "<hr>"
        self.root_results.setHtml(text)

    def on_root_link_clicked(self, url):
        if isinstance(url, str):
            sure_ayet = url
        else:
            sure_ayet = url.toString()
        sure, ayet = sure_ayet.split('/', 1)
        sure = int(sure)
        ayet = int(ayet)
        # Ayrƒ± pencere a√ß, ayeti g√∂ster
        dialog = QDialog(self)
        dialog.setWindowTitle(f"Ayet {sure}:{ayet}")
        layout = QVBoxLayout()
        # ƒ∞leri geri butonlarƒ±
        button_layout = QHBoxLayout()
        geri_btn = QPushButton("Geri")
        ileri_btn = QPushButton("ƒ∞leri")
        button_layout.addWidget(geri_btn)
        button_layout.addWidget(ileri_btn)
        # Favoriye Ekle butonu
        fav_btn = QPushButton("‚≠ê Favoriye Ekle")
        fav_btn.setStyleSheet("""
            QPushButton {
                background-color: #FFD700;
                color: black;
                font-weight: bold;
                font-size: 12px;
                padding: 8px 12px;
                border: 2px solid #FFA500;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #FFA500;
            }
            QPushButton:pressed {
                background-color: #FF8C00;
            }
        """)
        fav_btn.setFixedSize(150, 35)
        fav_btn.clicked.connect(lambda checked, s=sure, a=ayet: self.add_favorite(s, a))
        button_layout.addWidget(fav_btn)
        layout.addLayout(button_layout)
        # ƒ∞√ßerik alanƒ±
        content_widget = QWidget()
        content_layout = QVBoxLayout()
        content_widget.setLayout(content_layout)
        layout.addWidget(content_widget)
        dialog.setLayout(layout)
        dialog.resize(600, 400)

        def update_ayet():
            # √ñnceki i√ßeriƒüi temizle
            for i in reversed(range(content_layout.count())):
                widget = content_layout.itemAt(i).widget()
                if widget:
                    widget.setParent(None)
            # Yeni ayet g√∂ster
            arapca_raw = self.get_arabic_text(sure, ayet)
            arapca = ''
            transcript = self.get_transcript_text(sure, ayet)
            if arapca_raw:
                reshaped = arabic_reshaper.reshape(arapca_raw)
                arapca = reshaped
            meal_row = self.favorites_meal_df[(self.favorites_meal_df['sure'] == str(sure)) & (self.favorites_meal_df['ayet'] == str(ayet))]
            if not meal_row.empty:
                row = meal_row.iloc[0]
                # Ba≈ülƒ±k
                title_label = QLabel(f"<h2>{sure}:{ayet}</h2>")
                content_layout.addWidget(title_label)
                # T√ºrk√ße kutucuk
                turk_group = QGroupBox("T√ºrk√ße Me√¢l")
                turk_layout = QVBoxLayout()
                turk_text = QTextEdit()
                turk_text.setReadOnly(True)
                turk_text.setFont(self.font_turkish)
                turk_text.setHtml(self.highlight_text(f"[{row['sira']}] {row['sure']}/{row['ayet']}\n{row['metin']}", ''))
                turk_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                turk_layout.addWidget(turk_text)
                turk_group.setLayout(turk_layout)
                content_layout.addWidget(turk_group)
                # Arap√ßa kutucuk
                if arapca:
                    arap_group = QGroupBox("Arap√ßa Metin")
                    arap_layout = QVBoxLayout()
                    arap_text = QTextEdit()
                    arap_text.setReadOnly(True)
                    arap_text.setFont(self.font_arabic)
                    arap_text.setHtml(self.highlight_text(arapca, ''))
                    arap_text.setAlignment(Qt.AlignRight)
                    arap_text.setLayoutDirection(Qt.RightToLeft)
                    arap_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                    # Ayet ebced hesapla
                    normalized = self.normalize_arabic(arapca_raw)
                    ayet_ebced = sum(self.ebced.get(harf, 0) for harf in normalized)
                    ebced_label = QLabel(f"Ayet Ebced: {ayet_ebced}")
                    arap_layout.addWidget(ebced_label)
                    arap_layout.addWidget(arap_text)
                    arap_group.setLayout(arap_layout)
                    content_layout.addWidget(arap_group)
                # Transkript kutucuk
                if transcript:
                    trans_group = QGroupBox("Transkript (Abay Yazƒ±lƒ±≈üƒ±)")
                    trans_layout = QVBoxLayout()
                    trans_text = QTextEdit()
                    trans_text.setReadOnly(True)
                    trans_text.setFont(self.font_turkish)
                    trans_text.setHtml(self.highlight_text(transcript, ''))
                    trans_text.setTextInteractionFlags(Qt.TextSelectableByMouse)
                    trans_layout.addWidget(trans_text)
                    trans_group.setLayout(trans_layout)
                    content_layout.addWidget(trans_group)

        update_ayet()

        def on_geri():
            nonlocal ayet, sure
            if ayet > 1:
                ayet -= 1
            else:
                sure -= 1
                if sure < 1:
                    sure = 114
                ayet = self.get_verse_count(sure)
            update_ayet()

        def on_ileri():
            nonlocal ayet, sure
            max_ayet = self.get_verse_count(sure)
            if ayet < max_ayet:
                ayet += 1
            else:
                sure += 1
                if sure > 114:
                    sure = 1
                ayet = 1
            update_ayet()

        geri_btn.clicked.connect(on_geri)
        ileri_btn.clicked.connect(on_ileri)

        dialog.exec_()

    def letter_analysis(self):
        ref = self.letter_input.text().strip()
        if not ref or '/' not in ref:
            self.letter_results.setText("Sure/Ayet girin, √∂rn: 1/1")
            return
        sure, ayet = ref.split('/', 1)
        arapca = self.get_arabic_text(sure, ayet)
        if not arapca:
            self.letter_results.setText("Arap√ßa metin bulunamadƒ±.")
            return
        counts = {harf: arapca.count(harf) for harf in self.ARAP_HARFLER if arapca.count(harf) > 0}
        ebced_total = sum(self.ebced.get(harf, 0) * count for harf, count in counts.items())
        text = ""
        for harf, count in counts.items():
            text += f"{harf}: {count}\n"
        text += f"\nEbced Toplamƒ±: {ebced_total}"
        self.letter_results.setText(text)

    def compare_meals(self):
        input_text = self.comp_input.text().strip()
        sure, ayet = self.parse_input(input_text)
        if sure is None or ayet is None:
            self.left_text.setText("Ge√ßersiz giri≈ü. √ñrnek: 6236, 114/4, Nas 6")
            self.right_text.setText("")
            return
        selected_meals = []
        for i in range(self.meal_list.count()):
            item = self.meal_list.item(i)
            if item.checkState() == Qt.Checked:
                selected_meals.append(item.text())
        if len(selected_meals) == 0:
            self.left_text.setText("En az bir meal se√ßin.")
            self.right_text.setText("")
            return
        left_meal = selected_meals[0]
        right_meal = selected_meals[1] if len(selected_meals) > 1 else None
        left_text = f"S√ºre {sure}, Ayet {ayet} - {left_meal}\n\n"
        right_text = f"S√ºre {sure}, Ayet {ayet} - {right_meal}\n\n" if right_meal else ""
        try:
            df_left = pd.read_csv(os.path.join('tum_mealler', left_meal), dtype=str, encoding='utf-8-sig')
            match_left = df_left[(df_left['sure'] == str(sure)) & (df_left['ayet'] == str(ayet))]
            if not match_left.empty:
                left_text += match_left.iloc[0]['metin']
            else:
                left_text += "Bulunamadƒ±"
        except Exception as e:
            left_text += f"Hata: {str(e)}"
        if right_meal:
            try:
                df_right = pd.read_csv(os.path.join('tum_mealler', right_meal), dtype=str, encoding='utf-8-sig')
                match_right = df_right[(df_right['sure'] == str(sure)) & (df_right['ayet'] == str(ayet))]
                if not match_right.empty:
                    right_text += match_right.iloc[0]['metin']
                else:
                    right_text += "Bulunamadƒ±"
            except Exception as e:
                right_text += f"Hata: {str(e)}"
        if len(selected_meals) > 2:
            right_text += f"\n\nNot: ƒ∞lk iki meal kar≈üƒ±la≈ütƒ±rƒ±ldƒ±. Toplam {len(selected_meals)} meal se√ßili."
        self.left_text.setText(left_text)
        self.right_text.setText(right_text)

    def prev_verse(self):
        input_text = self.comp_input.text().strip()
        sure, ayet = self.parse_input(input_text)
        if sure is None or ayet is None:
            return
        if ayet > 1:
            ayet -= 1
        elif sure > 1:
            sure -= 1
            ayet = self.get_verse_count(sure)
        self.comp_input.setText(f"{sure}/{ayet}")
        self.compare_meals()

    def next_verse(self):
        input_text = self.comp_input.text().strip()
        sure, ayet = self.parse_input(input_text)
        if sure is None or ayet is None:
            return
        max_ayet = self.get_verse_count(sure)
        if ayet < max_ayet:
            ayet += 1
        elif sure < 114:
            sure += 1
            ayet = 1
        self.comp_input.setText(f"{sure}/{ayet}")
        self.compare_meals()

    def get_sure_name(self, sure_num):
        for name, num in self.sure_names.items():
            if num == sure_num:
                return name.capitalize()
        return "Bilinmiyor"

    def update_ayet_spin(self):
        sure = self.info_sure_combo.currentIndex() + 1
        max_ayet = self.get_verse_count(sure)
        self.info_ayet_spin.setMaximum(max_ayet)
        self.show_verse_info()

    def show_verse_info(self):
        sure = self.info_sure_combo.currentIndex() + 1
        ayet = self.info_ayet_spin.value()
        info = f"S√ºre: {sure} - {self.get_sure_name(sure)}\nAyet: {ayet}\n\n"
        if self.mekki_df is not None:
            match = self.mekki_df[self.mekki_df['sure'] == str(sure)]
            if not match.empty:
                info += f"Mekki/Medeni: {match.iloc[0]['tur']}\n"
        # ƒ∞ni≈ü sƒ±rasƒ± i√ßin basit bir dict, ger√ßek veriye g√∂re g√ºncelle
        inis_sirasi = {1: 5, 2: 87, 3: 89, 4: 92, 5: 112, 6: 55, 7: 39, 8: 88, 9: 113, 10: 51, 11: 52, 12: 53, 13: 96, 14: 72, 15: 54, 16: 70, 17: 50, 18: 69, 19: 44, 20: 45, 21: 73, 22: 103, 23: 74, 24: 102, 25: 42, 26: 47, 27: 48, 28: 49, 29: 85, 30: 84, 31: 57, 32: 75, 33: 90, 34: 58, 35: 43, 36: 41, 37: 56, 38: 38, 39: 59, 40: 60, 41: 61, 42: 62, 43: 63, 44: 64, 45: 65, 46: 66, 47: 95, 48: 111, 49: 106, 50: 34, 51: 67, 52: 76, 53: 23, 54: 37, 55: 97, 56: 46, 57: 94, 58: 105, 59: 101, 60: 91, 61: 109, 62: 110, 63: 104, 64: 108, 65: 99, 66: 107, 67: 77, 68: 2, 69: 78, 70: 79, 71: 71, 72: 40, 73: 3, 74: 4, 75: 31, 76: 98, 77: 33, 78: 80, 79: 81, 80: 24, 81: 7, 82: 82, 83: 86, 84: 83, 85: 27, 86: 36, 87: 8, 88: 68, 89: 10, 90: 35, 91: 26, 92: 9, 93: 11, 94: 12, 95: 28, 96: 1, 97: 25, 98: 100, 99: 93, 100: 14, 101: 30, 102: 16, 103: 13, 104: 32, 105: 19, 106: 29, 107: 17, 108: 15, 109: 18, 110: 20, 111: 21, 112: 22, 113: 6, 114: 114}
        if sure in inis_sirasi:
            info += f"ƒ∞ni≈ü Sƒ±rasƒ±: {inis_sirasi[sure]}\n"
        # A√ßƒ±klamalar i√ßin basit dict, ger√ßek veriye g√∂re g√ºncelle
        aciklamalar = {1: "Kur'an'ƒ±n giri≈üi, dualar.", 2: "En uzun sure, √ße≈üitli konular.", 3: "ƒ∞man esaslarƒ±, aile hukuku."}  # Kƒ±sa √∂rnek
        if sure in aciklamalar:
            info += f"A√ßƒ±klama: {aciklamalar[sure]}\n"
        # Not y√ºkle
        notes_file = 'notes.json'
        if os.path.exists(notes_file):
            with open(notes_file, 'r', encoding='utf-8') as f:
                notes = json.load(f)
            key = f"{sure}-{ayet}"
            if key in notes:
                note_data = notes[key]
                if isinstance(note_data, dict):
                    info += f"\nNot ({note_data.get('tag', 'Genel')}): {note_data['note']}"
                else:
                    # Eski format i√ßin
                    info += f"\nNot: {note_data}"
        self.info_text.setText(info)

    def save_note(self):
        sure = self.info_sure_combo.currentIndex() + 1
        ayet = self.info_ayet_spin.value()
        note = self.note_text.toPlainText().strip()
        tag = self.note_tag.currentText()
        if not note:
            return
        notes_file = 'notes.json'
        if os.path.exists(notes_file):
            with open(notes_file, 'r', encoding='utf-8') as f:
                notes = json.load(f)
        else:
            notes = {}
        key = f"{sure}-{ayet}"
        notes[key] = {"note": note, "tag": tag}
        with open(notes_file, 'w', encoding='utf-8') as f:
            json.dump(notes, f, ensure_ascii=False, indent=4)
        self.note_text.clear()
        self.show_verse_info()

    def edit_note(self):
        sure = self.info_sure_combo.currentIndex() + 1
        ayet = self.info_ayet_spin.value()
        notes_file = 'notes.json'
        if os.path.exists(notes_file):
            with open(notes_file, 'r', encoding='utf-8') as f:
                notes = json.load(f)
            key = f"{sure}-{ayet}"
            if key in notes:
                note_data = notes[key]
                if isinstance(note_data, dict):
                    self.note_text.setPlainText(note_data['note'])
                    self.note_tag.setCurrentText(note_data.get('tag', 'Genel'))
                else:
                    self.note_text.setPlainText(note_data)
                    self.note_tag.setCurrentText('Genel')

    def delete_note(self):
        sure = self.info_sure_combo.currentIndex() + 1
        ayet = self.info_ayet_spin.value()
        notes_file = 'notes.json'
        if os.path.exists(notes_file):
            with open(notes_file, 'r', encoding='utf-8') as f:
                notes = json.load(f)
            key = f"{sure}-{ayet}"
            if key in notes:
                del notes[key]
                with open(notes_file, 'w', encoding='utf-8') as f:
                    json.dump(notes, f, ensure_ascii=False, indent=4)
        self.note_text.clear()
        self.show_verse_info()  # G√ºncelle

    def create_audio_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        hlayout = QHBoxLayout()
        hlayout.addWidget(QLabel("Sure:"))
        self.audio_sure = QSpinBox()
        self.audio_sure.setRange(1, 114)
        self.audio_sure.valueChanged.connect(self.update_ayet_range)
        hlayout.addWidget(self.audio_sure)
        hlayout.addWidget(QLabel("Ayet:"))
        self.audio_ayet = QSpinBox()
        self.audio_ayet.setRange(1, 7)  # default for sure 1
        hlayout.addWidget(self.audio_ayet)
        self.play_button = QPushButton("Oynat")
        self.play_button.clicked.connect(self.play_audio)
        hlayout.addWidget(self.play_button)
        self.stop_button = QPushButton("Durdur")
        self.stop_button.clicked.connect(self.stop_audio)
        hlayout.addWidget(self.stop_button)
        layout.addLayout(hlayout)
        self.audio_status = QLabel("Hazƒ±r")
        layout.addWidget(self.audio_status)
        widget.setLayout(layout)
        return widget

    def update_ayet_range(self):
        sure = self.audio_sure.value()
        max_ayet = self.get_verse_count(sure)
        self.audio_ayet.setMaximum(max_ayet)
        if self.audio_ayet.value() > max_ayet:
            self.audio_ayet.setValue(max_ayet)

    def play_audio(self):
        sure = self.audio_sure.value()
        ayet = self.audio_ayet.value()
        file_name = f"{sure:03d}{ayet:03d}.mp3"
        folder = 'kuran (arabic) sesli'
        file_path = os.path.join(folder, file_name)
        if os.path.exists(file_path):
            self.player.setMedia(QMediaContent(QUrl.fromLocalFile(file_path)))
            self.player.play()
            self.audio_status.setText(f"Oynatƒ±lƒ±yor: {sure}:{ayet}")
        else:
            self.audio_status.setText("Ses dosyasƒ± bulunamadƒ±")

    def stop_audio(self):
        self.player.stop()
        self.audio_status.setText("Durduruldu")

    def play_verse_audio(self, sure, ayet):
        file_name = f"{sure:03d}{ayet:03d}.mp3"
        folder = 'kuran (arabic) sesli'
        file_path = os.path.join(folder, file_name)
        if os.path.exists(file_path):
            self.player.setMedia(QMediaContent(QUrl.fromLocalFile(file_path)))
            self.player.play()
            self.audio_status.setText(f"Oynatƒ±lƒ±yor: {sure}:{ayet}")
        else:
            self.audio_status.setText("Ses dosyasƒ± bulunamadƒ±")



if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = QuranSearchApp(app)
    window.show()
    window.raise_()
    window.activateWindow()
    sys.exit(app.exec_())
